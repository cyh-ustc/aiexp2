 hi i was inspired by a mode of operation supported by vmware you can have a base disk image shared by multiple virtual machine vm instances that base image is never altered by a vm instance instead each vm instance writes changes to its own redo log future hard disk reads from that vm instance incorporate both the base image and the appropriate redo log to present the current disk image for that specific virtual machine this is described here thanks to duane for providing this link on the honeypots mailing list http www vmware com support reference common disk sharing html could this basic concept be used to easily make self fixing client server applications that efficiently and automatically recover from most attacks even before those attacks have been discovered here is what i imagine the physical architectures of most production client server systems are layered for example your basic web application might have a web server running apache connected to an application server running some j ee or net business logic connected to a database server for persistence the only one of these whose disk image really should evolve over time is the database server and even here you often put the static rdbms software on one partition and the changeable datafiles on another partition it is only the partition with the volatile datafiles that must be allowed to change from one boot to the next other paritions may need to be writable for say swap space but these changes could be eliminated on each reboot when someone cracks this system they will probably change an image that shouldn t be changed e g they might leverage a buffer overflow in iis or apache to install a trojan or a backdoor on the more exposed web server but what if the web server ran off a base image writing changes to a delta or redo partition and then what if every night it automatically erased the redo partition and rebooted the downtime involved for each machine would be minimal because it is only deleting data rather than restoring from backup in a system with redundant web servers for load balancing or high availability this could be scheduled in a way such that the system is always accessible this base redo partition concept could be implemented at the same level as a feature of hardware raid allowing for greater performance reliability and hack resistance this concept could also be applied to the application servers and even the database server partitions except for those partitions which contain the table data files of course does anyone do this already or is this a new concept or has this concept been discussed before and abandoned for some reasons that i don t yet know i use the physical architecture of a basic web application as an example in this post but this concept could of course be applied to most server systems it would allow for the hardware separation of volatile and non volatile disk images it would be analogous to performing nightly ghosting operations only it would be more efficient and involve less or no downtime thanks for any opinions ben 